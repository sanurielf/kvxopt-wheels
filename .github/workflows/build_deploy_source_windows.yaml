name: Deploy windows wheels and source code

on:
  push:
    branches: [master]

env:
  BUILD_COMMIT: 1.3.2.1
  # Upload to test pipy
  UPLOAD_TO_TEST_PYPI: 0
  # Upload to official pipy repo
  UPLOAD_TO_OFFI_PYPI: 0
  GLPK_VERSION: "5.0"
  GLPK_SHA256: 4a1013eebb50f728fc601bdd833b0b2870333c3b3e5a816eeba921d95bec6f15
  OSQP_VERSION: 0.6.3
  GSL_COMMIT_HASH: "f8e56946ce337a5a3f3229821faaf52607842874"

jobs:

  deploy_source_code:

    runs-on: macos-latest

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive
          cd kvxopt
          git checkout ${BUILD_COMMIT}

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine setuptools setuptools_scm wheel build

      - name: Install libraries
        run: |
            brew install openblas glpk gsl fftw suite-sparse osqp
            brew list suite-sparse
            echo "KVXOPT_SUITESPARSE_INC_DIR=$(brew --prefix)/include/suitesparse" >> $GITHUB_ENV
            echo "KVXOPT_SUITESPARSE_LIB_DIR=$(brew --prefix)/lib" >> $GITHUB_ENV

      - name: Build
        run: |
          cd kvxopt
          python setup.py build
          python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          name: kvxopt-source
          path: kvxopt/dist/*.tar.gz

      - name: Publish wheels to PyPI test
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_TEST_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
        run: |
          twine upload --repository testpypi kvxopt/dist/*.tar.gz
        if: ${{ env.UPLOAD_TO_TEST_PYPI == 1 }}

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload kvxopt/dist/*.tar.gz
        if: ${{ env.UPLOAD_TO_OFFI_PYPI == 1 }}

  Build_common_libs:
    runs-on: windows-2019

    strategy:
      matrix:
        ARCH: [x64, x86]
        include:
          - ARCH: x64
            VC_TARGET: 64
            CMAKE_TARGET: x64

          - ARCH: x86
            VC_TARGET: 32
            CMAKE_TARGET: Win32

    steps:

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: coreutils unzip git

      - name: Check cache for GSL
        id: cache-gsl
        uses: actions/cache@v3
        with:
          path: gsl
          key: ${{ runner.os }}-${{ matrix.ARCH }}-osqp-${{ env.GSL_COMMIT_HASH }}

      - if: ${{ steps.cache-gsl.outputs.cache-hit != 'true' }}
        name: Get GSL
        shell: msys2 {0}
        run: |
            git clone --recursive https://github.com/ampl/gsl.git
            cd gsl
            git checkout ${GSL_COMMIT_HASH}

      - if: ${{ steps.cache-gsl.outputs.cache-hit != 'true' }}
        name: Compile GSL
        run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
            cd gsl
            mkdir build
            cd build
            cmake -G "Visual Studio 16 2019" -A ${{ matrix.CMAKE_TARGET }} -DGSL_INSTALL_MULTI_CONFIG=ON -DBUILD_SHARED_LIBS=ON -DMSVC_RUNTIME_DYNAMIC=ON -DCMAKE_INSTALL_PREFIX=dist ..
            cmake --build . --target install
        shell: cmd

      - uses: actions/upload-artifact@v2
        with:
          name: gsl-${{ matrix.ARCH }}
          path: gsl/build/dist/*

      - name: Check cache for GLPK
        id: cache-glpk
        uses: actions/cache@v3
        with:
          path: glpk-${{ env.GLPK_VERSION }}
          key: ${{ runner.os }}-${{ matrix.ARCH }}-glpk-${{ env.GLPK_VERSION }}-${{ env.GLPK_SHA256 }}

      - if: ${{ steps.cache-glpk.outputs.cache-hit != 'true' }}
        name: Get GLPK
        shell: msys2 {0}
        run: |
            wget -nv http://ftp.gnu.org/gnu/glpk/glpk-${{ env.GLPK_VERSION }}.tar.gz
            echo "${GLPK_SHA256}  glpk-${{ env.GLPK_VERSION }}.tar.gz" > GLPK.sha256
            shasum -a 256 -c GLPK.sha256
            tar -xf glpk-${{ env.GLPK_VERSION }}.tar.gz

      - if: ${{ steps.cache-glpk.outputs.cache-hit != 'true' }}
        name: Compile GLPK
        run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
            cd glpk-${{ env.GLPK_VERSION }}\w64
            cp config_VC config.h
            nmake /f Makefile_VC glpk.lib
            dir
            cd ..\..
        shell: cmd

      - uses: actions/upload-artifact@v2
        with:
          name: glpk-${{ matrix.ARCH }}
          path: |
            glpk-${{ env.GLPK_VERSION }}\w64\*
            glpk-${{ env.GLPK_VERSION }}\src\glpk.h

      - name: Check cache for OSQP
        id: cache-osqp
        uses: actions/cache@v3
        with:
          path: osqp
          key: ${{ runner.os }}-${{ matrix.ARCH }}-osqp-${{ env.OSQP_VERSION }}

      - if: ${{ steps.cache-osqp.outputs.cache-hit != 'true' }}
        name: Get OSQP
        shell: msys2 {0}
        run: |
            git clone --recursive https://github.com/oxfordcontrol/osqp.git
            cd osqp
            git checkout v${{ env.OSQP_VERSION }}
            git submodule sync --recursive
            git -c protocol.version=2 submodule update --init --force --depth=1 --recursive

      - if: ${{ steps.cache-osqp.outputs.cache-hit != 'true' }}
        name: Compile OSQP
        run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
            cd osqp
            mkdir build
            cd build
            cmake -G "Visual Studio 16 2019" -A ${{ matrix.CMAKE_TARGET }} -DCMAKE_INSTALL_PREFIX=dist ..
            cmake --build . --target install
        shell: cmd

      - uses: actions/upload-artifact@v2
        with:
          name: osqp-${{ matrix.ARCH }}
          path: osqp/build/dist/*



  Build_wheel:
    needs: Build_common_libs
    runs-on: windows-2019
    env:
      KVXOPT_BUILD_GSL: 1
      KVXOPT_BUILD_FFTW: 1
      KVXOPT_BUILD_GLPK: 1
      KVXOPT_BUILD_DSDP: 0
      KVXOPT_MSVC: 1
      KVXOPT_BUILD_OSQP: 1
      SUITESPARSE_VERSION: 7.7.0
      SUITESPARSE_SHA256: 529b067f5d80981f45ddf6766627b8fc5af619822f068f342aab776e683df4f3
      OPENBLAS_VERSION: 0.3.23
      FFTW_VERSION: 3.3.5


    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        suite-sparse: [src_suitesparse]
        ARCH: [x64, x86]
        include:
        - ARCH: x64
          VC_TARGET: 64
          PYTHON_ARCH_TARGET: win-amd64
          OPENBLAS_SHA256: e3a82e60db8d6197228790567e7cf74f2c421a65b29f848977a07b5457debdaa
          FFTW_SHA256: cfd88dc0e8d7001115ea79e069a2c695d52c8947f5b4f3b7ac54a192756f439f

        - ARCH: x86
          VC_TARGET: 32
          PYTHON_ARCH_TARGET: win32
          OPENBLAS_SHA256: 89060f862ca33219aaf7ef49b58a0a8b2d763236a1c6a16c693cd28146a812e6
          FFTW_SHA256: 29882a43033c9393479a4df52a2e9120589c06a2b724155b1a682747fa3e57d4

        - python-version: 3.8
          PYTHON_TARGET: 3.8

        - python-version: 3.9
          PYTHON_TARGET: 3.9

        - python-version: 3.10
          PYTHON_TARGET: cpython-310

        - python-version: 3.11
          PYTHON_TARGET: cpython-311

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive
          cd kvxopt
          git checkout ${{ env.BUILD_COMMIT }}
        shell: cmd

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.ARCH}}

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: coreutils unzip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools setuptools_scm wheel build

      - name: Get openblas
        shell: msys2 {0}
        run: |
            wget https://github.com/xianyi/OpenBLAS/releases/download/v${OPENBLAS_VERSION}/OpenBLAS-${OPENBLAS_VERSION}-${{matrix.ARCH}}.zip
            wget https://raw.githubusercontent.com/xianyi/OpenBLAS/v${OPENBLAS_VERSION}/LICENSE  -O OpenBLAS_LINCENSE
            echo "${{matrix.OPENBLAS_SHA256}}  OpenBLAS-${OPENBLAS_VERSION}-${{ matrix.ARCH }}.zip" > OpenBLAS.sha256
            sha256sum -c OpenBLAS.sha256
            mkdir kvxopt/src/python/.libs
            mkdir OpenBLAS
            unzip OpenBLAS-${OPENBLAS_VERSION}-${{matrix.ARCH}}.zip -d OpenBLAS/
            cp OpenBLAS/bin/libopenblas.dll kvxopt/src/python/.libs
            cp OpenBLAS_LINCENSE kvxopt/src/python/.libs
            echo "KVXOPT_BLAS_LIB_DIR=${{ github.workspace}}/OpenBLAS/lib" >> $GITHUB_ENV
            echo "KVXOPT_LAPACK_LIB=libopenblas" >> $GITHUB_ENV
            echo "KVXOPT_BLAS_LIB=libopenblas" >> $GITHUB_ENV

      - name: Get FFTW
        shell: msys2 {0}
        run: |
            wget ftp://ftp.fftw.org/pub/fftw/fftw-${FFTW_VERSION}-dll${{matrix.VC_TARGET}}.zip
            echo "${{matrix.FFTW_SHA256}}  fftw-${FFTW_VERSION}-dll${{ matrix.VC_TARGET }}.zip" > FFTW.sha256
            shasum -a 256 -c FFTW.sha256
            mkdir fftw_lib
            unzip fftw-${FFTW_VERSION}-dll${{matrix.VC_TARGET}}.zip -d fftw_lib/
            cp fftw_lib/libfftw3-3.dll kvxopt/src/python/.libs
            echo "KVXOPT_FFTW_LIB_DIR=${{ github.workspace}}/fftw_lib" >> $GITHUB_ENV
            echo "KVXOPT_FFTW_INC_DIR=${{ github.workspace}}/fftw_lib" >> $GITHUB_ENV
            echo "KVXOPT_FFTW_LIB=libfftw3-3" >> $GITHUB_ENV

      - name: Download suite-sparse source
        shell: msys2 {0}
        run: |
            export MSYS=winsymlinks:lnk
            wget https://github.com/DrTimothyAldenDavis/SuiteSparse/archive/v${{ env.SUITESPARSE_VERSION }}.tar.gz
            echo "${SUITESPARSE_SHA256}  v${{ env.SUITESPARSE_VERSION }}.tar.gz" > SuiteSparse.sha256
            shasum -a 256 -c SuiteSparse.sha256
            tar -xf v${{ env.SUITESPARSE_VERSION }}.tar.gz
            echo "KVXOPT_SUITESPARSE_SRC_DIR=${{ github.workspace}}/SuiteSparse-${{ env.SUITESPARSE_VERSION }}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v2
        with:
          name: glpk-${{ matrix.ARCH }}
          path: glpk_lib

      - name: Set GLPK path
        run: |
            echo "KVXOPT_GLPK_LIB_DIR=${{ github.workspace}}\glpk_lib\w64"  >> $env:GITHUB_ENV
            echo "KVXOPT_GLPK_INC_DIR=${{ github.workspace}}\glpk_lib\src"  >> $env:GITHUB_ENV

      - uses: actions/download-artifact@v2
        with:
          name: osqp-${{ matrix.ARCH }}
          path: osqp_lib

      - name: Set OSQP path
        run: |
            copy osqp_lib\bin\osqp.dll kvxopt\src\python\.libs
            copy osqp_lib\bin\qdldl.dll kvxopt\src\python\.libs
            echo "KVXOPT_OSQP_LIB_DIR=${{ github.workspace}}\osqp_lib\lib"  >> $env:GITHUB_ENV
            echo "KVXOPT_OSQP_INC_DIR=${{ github.workspace}}\osqp_lib\include\osqp"  >> $env:GITHUB_ENV

      - name: Create .lib import files for FFTW
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
          cd fftw_lib
          lib /machine:${{ matrix.ARCH }} /def:libfftw3-3.def
        shell: cmd

      - uses: actions/download-artifact@v2
        with:
          name: gsl-${{ matrix.ARCH }}
          path: gsl_lib

      - name: Set GSL path
        run: |
            copy gsl_lib\bin\Debug\gsl.dll kvxopt\src\python\.libs
            copy gsl_lib\bin\Debug\gslcblas.dll kvxopt\src\python\.libs
            echo "KVXOPT_GSL_LIB_DIR=${{ github.workspace}}\gsl_lib\lib\Debug" >> $env:GITHUB_ENV
            echo "KVXOPT_GSL_INC_DIR=${{ github.workspace}}\gsl_lib\include" >> $env:GITHUB_ENV

      - name: Build wheel
        run: |
          cd kvxopt
          python setup.py build
          python setup.py bdist_wheel
        shell: cmd

      - uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.ARCH }}-${{ matrix.python-version }}-wheel
          path: kvxopt/dist/*.whl


  Test_and_deploy:
    runs-on: windows-2019
    needs: Build_wheel

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        ARCH: [x64, x86]

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive
          cd kvxopt
          git checkout ${{ env.BUILD_COMMIT }}
        shell: cmd

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.ARCH}}

      - name: Install python testing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coveralls twine numpy


      - uses: actions/download-artifact@v2
        with:
          name: windows-${{ matrix.ARCH }}-${{ matrix.python-version }}-wheel

      - name: Test
        run: |
            pip install --no-index --find-links . kvxopt
            python -c 'from kvxopt import blas,lapack,cholmod,umfpack,klu,glpk,osqp'
            pytest --cov=kvxopt kvxopt\tests

      - name: Publish wheels to PyPI test
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_TEST_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
        run: |
          twine upload --repository testpypi *.whl
        if: ${{ env.UPLOAD_TO_TEST_PYPI == 1 }}

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload *.whl
        if: ${{ env.UPLOAD_TO_OFFI_PYPI == 1 }}
