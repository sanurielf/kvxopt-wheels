name: Deploy Windows Wheels and Source Code

on:
  push:
    branches:
      - master

env:
  BUILD_COMMIT: 1.3.2.1
  UPLOAD_TO_TEST_PYPI: 1
  UPLOAD_TO_OFFI_PYPI: 0
  GLPK_VERSION: "5.0"
  GLPK_SHA256: 4a1013eebb50f728fc601bdd833b0b2870333c3b3e5a816eeba921d95bec6f15
  OSQP_VERSION: 0.6.3
  GSL_COMMIT_HASH: "f8e56946ce337a5a3f3229821faaf52607842874"

jobs:
  deploy_source_code:
    runs-on: macos-latest

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Checkout Submodules
        run: |
          git submodule update --init --recursive
          cd kvxopt
          git checkout ${BUILD_COMMIT}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine setuptools setuptools_scm wheel build

      - name: Install Libraries
        run: |
          brew install openblas glpk gsl fftw suite-sparse osqp
          echo "KVXOPT_SUITESPARSE_INC_DIR=$(brew --prefix)/include/suitesparse" >> $GITHUB_ENV
          echo "KVXOPT_SUITESPARSE_LIB_DIR=$(brew --prefix)/lib" >> $GITHUB_ENV

      - name: Build Source Code
        run: |
          cd kvxopt
          python setup.py build
          python setup.py sdist

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kvxopt-source
          path: kvxopt/dist/*.tar.gz

      - name: Publish to Test PyPI
        if: ${{ env.UPLOAD_TO_TEST_PYPI == '1' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          twine upload --repository testpypi kvxopt/dist/*.tar.gz

      - name: Publish to Official PyPI
        if: ${{ env.UPLOAD_TO_OFFI_PYPI == '1' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload kvxopt/dist/*.tar.gz

  build_common_libs:
    runs-on: windows-2019

    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            vc_target: 64
            cmake_target: x64
          - arch: x86
            vc_target: 32
            cmake_target: Win32

    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: coreutils unzip git

      - name: Cache GSL
        id: cache-gsl
        uses: actions/cache@v3
        with:
          path: gsl
          key: ${{ runner.os }}-${{ matrix.arch }}-gsl-${{ env.GSL_COMMIT_HASH }}

      - name: Build GSL
        if: ${{ steps.cache-gsl.outputs.cache-hit != 'true' }}
        run: |
          git clone --recursive https://github.com/ampl/gsl.git
          cd gsl
          git checkout ${GSL_COMMIT_HASH}
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A ${{ matrix.cmake_target }} -DCMAKE_INSTALL_PREFIX=dist ..
          cmake --build . --target install

      - name: Upload GSL Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gsl-${{ matrix.arch }}
          path: gsl/build/dist/*

      - name: Check cache for GLPK
        id: cache-glpk
        uses: actions/cache@v3
        with:
          path: glpk-${{ env.GLPK_VERSION }}
          key: ${{ runner.os }}-${{ matrix.arch }}-glpk-${{ env.GLPK_VERSION }}-${{ env.GLPK_SHA256 }}

      - if: ${{ steps.cache-glpk.outputs.cache-hit != 'true' }}
        name: Get GLPK
        shell: msys2 {0}
        run: |
            wget -nv http://ftp.gnu.org/gnu/glpk/glpk-${{ env.GLPK_VERSION }}.tar.gz
            echo "${GLPK_SHA256}  glpk-${{ env.GLPK_VERSION }}.tar.gz" > GLPK.sha256
            shasum -a 256 -c GLPK.sha256
            tar -xf glpk-${{ env.GLPK_VERSION }}.tar.gz

      - if: ${{ steps.cache-glpk.outputs.cache-hit != 'true' }}
        name: Compile GLPK
        run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
            cd glpk-${{ env.GLPK_VERSION }}\w64
            cp config_VC config.h
            nmake /f Makefile_VC glpk.lib
            dir
            cd ..\..
        shell: cmd

      - uses: actions/upload-artifact@v4
        with:
          name: glpk-${{ matrix.arch }}
          path: |
            glpk-${{ env.GLPK_VERSION }}\w64\*
            glpk-${{ env.GLPK_VERSION }}\src\glpk.h

      - name: Check cache for OSQP
        id: cache-osqp
        uses: actions/cache@v3
        with:
          path: osqp
          key: ${{ runner.os }}-${{ matrix.arch }}-osqp-${{ env.OSQP_VERSION }}

      - if: ${{ steps.cache-osqp.outputs.cache-hit != 'true' }}
        name: Get OSQP
        shell: msys2 {0}
        run: |
            git clone --recursive https://github.com/oxfordcontrol/osqp.git
            cd osqp
            git checkout v${{ env.OSQP_VERSION }}
            git submodule sync --recursive
            git -c protocol.version=2 submodule update --init --force --depth=1 --recursive

      - if: ${{ steps.cache-osqp.outputs.cache-hit != 'true' }}
        name: Compile OSQP
        run: |
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.VC_TARGET }}.bat"
            cd osqp
            mkdir build
            cd build
            cmake -G "Visual Studio 16 2019" -A ${{ matrix.CMAKE_TARGET }} -DCMAKE_INSTALL_PREFIX=dist ..
            cmake --build . --target install
        shell: cmd

      - uses: actions/upload-artifact@v4
        with:
          name: osqp-${{ matrix.arch }}
          path: osqp/build/dist/*



  build_wheel:
    needs: build_common_libs
    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        arch: [x64, x86]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools setuptools_scm wheel build

      - name: Build Wheel
        run: |
          cd kvxopt
          python setup.py build
          python setup.py bdist_wheel

      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-${{ matrix.python-version }}-wheel
          path: kvxopt/dist/*.whl

  test_and_deploy:
    needs: build_wheel
    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        arch: [x64, x86]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Install Testing Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coveralls twine numpy

      - name: Download Wheel Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-${{ matrix.python-version }}-wheel

      - name: Test Wheel
        run: |
          pip install --no-index --find-links . kvxopt
          pytest --cov=kvxopt kvxopt/tests

      - name: Publish to Test PyPI
        if: ${{ env.UPLOAD_TO_TEST_PYPI == '1' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          twine upload --repository testpypi *.whl

      - name: Publish to Official PyPI
        if: ${{ env.UPLOAD_TO_OFFI_PYPI == '1' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload *.whl
