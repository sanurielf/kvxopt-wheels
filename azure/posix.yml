parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      REPO_DIR: "kvxopt"
      PLAT: ${{ parameters.plat }}
      NIGHTLY_BUILD_COMMIT: "master"
      TEST_DEPENDS: "pytest numpy"
      JUNITXML: "test-data.xml"
      TEST_DIR: "tmp_for_test"
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}

    steps:
      - checkout: self
        submodules: true

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(AZURE_PYTHON_VERSION)
        displayName: Set python version from AZURE
        condition: ne( coalesce (variables['AZURE_PYTHON_VERSION'], 'NONE'), 'NONE')

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(MB_PYTHON_VERSION)
        displayName: Set python version from MB
        condition: eq( coalesce (variables['AZURE_PYTHON_VERSION'], 'NONE'), 'NONE')

      - bash: |
          set -e
          uname -m
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        condition: eq(variables['PLAT'], 'aarch64')
        displayName: Setting up QEMU to run aarch64 images.

      - bash: |
          set -e

          if [ "$BUILD_REASON" == "Schedule" ]; then
            BUILD_COMMIT=$NIGHTLY_BUILD_COMMIT
          fi
          echo "Building kvxopt@$BUILD_COMMIT"
          echo "##vso[task.setvariable variable=BUILD_COMMIT]$BUILD_COMMIT"

          # Platform variables used in multibuild scripts
          if [ `uname` == 'Darwin' ]; then
            echo "##vso[task.setvariable variable=TRAVIS_OS_NAME]osx"
            echo "##vso[task.setvariable variable=MACOSX_DEPLOYMENT_TARGET]10.9"
          else
            echo "##vso[task.setvariable variable=TRAVIS_OS_NAME]linux"
          fi


          # Store original Python path to be able to create test_venv pointing
          # to same Python version.
          PYTHON_EXE=`which python`
          echo "##vso[task.setvariable variable=PYTHON_EXE]$PYTHON_EXE"
        displayName: Define build env variables

      - bash: |
          set -ex
          echo $BUILD_COMMIT

          pip install virtualenv wheel

          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          source extra_functions.sh

          # Setup build dependencies
          before_install

          clean_code $REPO_DIR $BUILD_COMMIT
          build_wheel $REPO_DIR $PLAT
        displayName: Build wheel

      - bash: |
          set -ex
          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          source extra_functions.sh

          setup_test_venv
          install_run $PLAT
          teardown_test_venv
        displayName: Install wheel and test

      - bash: |
          set -ex
          pip install boto3

          for file in wheelhouse/*.whl
          do
            python s3_upload.py "$file"
          done
        condition: eq(variables['UPLOAD_TO_BACKBLAZE'], 1)
        env:
          BACKBLAZE_KEYID: $(BACKBLAZE_KEYID)
          BACKBLAZE_APPKEY: $(BACKBLAZE_APPKEY)
        displayName: Upload to BACKBLAZE

      - bash: |
          set -ex
          pip install twine
          twine upload --repository testpypi wheelhouse/*.whl
        condition: eq(variables['UPLOAD_TO_TEST_PYPI'], 1)
        env:
          TWINE_USERNAME: $(PYPI_TEST_USERNAME)
          TWINE_PASSWORD: $(PYPI_TEST_PASSWORD)
        displayName: Publish wheels to PyPI test

      - bash: |
          set -ex
          pip install twine
          twine upload wheelhouse/*.whl
        condition: eq(variables['UPLOAD_TO_OFFI_PYPI'], 1)
        env:
          TWINE_USERNAME: $(PYPI_USERNAME)
          TWINE_PASSWORD: $(PYPI_PASSWORD)
        displayName: Publish wheels to PyPI


