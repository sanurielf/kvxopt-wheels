parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      NIGHTLY_BUILD_COMMIT: "master"
      JUNITXML: "test-data.xml"
      TEST_DIR: '$(Agent.WorkFolder)/tmp_for_test'
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}
    steps:
      - checkout: self
        submodules: true

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: $(PYTHON_ARCH)
        displayName: Set python version
        condition: not(contains(variables['PYTHON_VERSION'], 'PyPy'))

      - powershell: |
          $url = "http://buildbot.pypy.org/nightly/py3.6/pypy-c-jit-latest-win32.zip"
          $output = "pypy.zip"
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile($url, $output)
          echo "downloaded $url to $output"
          mkdir pypy3
          Expand-Archive $output -DestinationPath pypy3
          move pypy3/pypy-c-*/* pypy3
          cp pypy3/pypy3.exe pypy3/python.exe
          $pypypath = Join-Path (Get-Item .).FullName pypy3
          $env:Path = $pypypath + ";" + $env:Path
          setx PATH $env:Path
          python -mensurepip
          echo "##vso[task.prependpath]$pypypath"
        condition: contains(variables['PYTHON_VERSION'], 'PyPy')
        displayName: "Install PyPy pre-release"

      - bash: |
          set -e
          echo PYTHON $PYTHON_VERSION $PYTHON_ARCH
          echo Build Reason: $BUILD_REASON
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          python -m pip --version
        displayName: Check that we have the expected version and architecture for Python
      - bash: |
          set -e
          if [ "$BUILD_REASON" == "Schedule" ]; then
            BUILD_COMMIT=$NIGHTLY_BUILD_COMMIT
          fi
          echo "Building kvxopt@$BUILD_COMMIT"
          echo "##vso[task.setvariable variable=BUILD_COMMIT]$BUILD_COMMIT"
          # Store original Python path to be able to create test_venv pointing
          # to same Python version.
          PYTHON_EXE=`which python`
          echo "##vso[task.setvariable variable=PYTHON_EXE]$PYTHON_EXE"
        displayName: Define build env variables
      - bash: |
          set -e
          cd kvxopt
          git fetch origin HEAD
          git checkout $BUILD_COMMIT
          git clean -fxd
          git reset --hard
        displayName: Checkout kvxopt commit

      - powershell: |
          choco install -y mingw --forcex86 --force --version=7.3.0
        displayName: 'Install 32-bit mingw for 32-bit builds'
        condition: eq(variables['BITS'], 32)

      - bash: |
          set -xe
          echo $BUILD_COMMIT

          pip install virtualenv wheel 

          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          source extra_functions.sh

          # Setup build dependencies
          before_install


        displayName: Prepare the build

      - bash: |
          clean_code $REPO_DIR $BUILD_COMMIT
          build_wheel $REPO_DIR $PLAT

        displayName: Build wheel
      - bash: |
          set -ex
          source extra_functions.sh
          setup_test_venv
          python -m pip install kvxopt/dist/kvxopt-*.whl
          mkdir -p for_test
          pushd for_test
          run_tests
          popd
        displayName: Install wheel and test
